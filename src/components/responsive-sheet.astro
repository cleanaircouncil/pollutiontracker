---
const { class: classes, ...rest } = Astro.props;
---

<aside
  class:list={["height-full overflow-hidden align-end", classes]}
  {...rest}
  data-sheet-container
  data-position="low"
>
  <section class="sheet | overflow-hidden animate-sheet" data-sheet>
    <header class="sheet__handle" data-sheet-handle></header>

    <main
      class="sheet__content | overflow-hidden height-full"
      data-sheet-content
    >
      <slot />
    </main>
  </section>
</aside>

<style>
  .align-end {
    width: 100%;
    display: flex;
    align-items: end;
  }

  .sheet {
    width: 100%;
    background: var(--color-white);
    pointer-events: all;
    /* border: 3px solid orange; */
  }

  .animate-sheet {
    transition: height 0.2s ease-in-out;
  }

  @media screen and (max-width: 900px) {
    .sheet {
      border-start-start-radius: 1rem;
      border-start-end-radius: 1rem;
      box-shadow: var(--box-shadow);
      height: 50%;
      display: grid;
      grid-template-rows: min-content 1fr;
    }

    .sheet__handle {
      padding: 0.5rem;
      cursor: grab;
      user-select: none;
      flex: 0 0 auto;
    }

    .sheet__handle::after {
      content: "";
      display: block;
      height: 5px;
      width: 80px;
      border-radius: 5px;
      margin: 0px auto;
      background-color: var(--color-gray-light);
    }
  }

  @media screen and (min-width: 900px) {
    .sheet {
      height: 100% !important;
    }

    .sheet__content {
      /* padding-top: 1rem; */
    }
  }
</style>

<script>
  const sheetEl = document.querySelector("[data-sheet]");
  const handleEl = sheetEl.querySelector("[data-sheet-handle]");

  let height;
  let parentHeight;
  let startY;
  let isDragging = false;
  let lastScreenY;
  let deltaScreenY;

  const positions = ["20%", "50%", "95%"];

  function getHeightForPosition(el, string) {
    const previousValue = el.style.height;
    el.style.height = string;
    const result = el.getBoundingClientRect().height;
    el.style.height = previousValue;
    return result;
  }

  function handleStart(ev, screenY) {
    ev.preventDefault();

    height = sheetEl.getBoundingClientRect().height;
    parentHeight = sheetEl.parentElement.getBoundingClientRect().height;
    startY = screenY;
    isDragging = true;
    sheetEl.classList.remove("animate-sheet");
  }

  function handleMove(ev, screenY) {
    if (!isDragging) return;
    ev.preventDefault();

    sheetEl.style.height = `${(Math.min(parentHeight, height + (startY - screenY)) / parentHeight) * 100}%`;
    deltaScreenY = screenY - lastScreenY;
    lastScreenY = screenY
  }

  function handleEnd(ev, screenY) {
    if (!isDragging) return;
    ev.preventDefault();

    isDragging = false;
    height = sheetEl.getBoundingClientRect().height;
    const releasePosition = getHeightForPosition(sheetEl, `${height}px`);

    const calculatedPositions = positions.map((position) =>
      getHeightForPosition(sheetEl, position)
    );
    const finalIndex = calculatedPositions.reduce(
      (index, position, i) =>
        Math.abs(releasePosition - position) <
        Math.abs(releasePosition - calculatedPositions[index])
          ? i
          : index,
      0
    );

    const flingAdjustment = (Math.abs( deltaScreenY ) > 3) ? Math.sign(deltaScreenY) : 0;
    console.log( deltaScreenY, flingAdjustment );
    const index = Math.min( Math.max( finalIndex - flingAdjustment, 0 ), positions.length - 1)

    requestAnimationFrame(() => {
      sheetEl.classList.add("animate-sheet");
      sheetEl.style.height = positions[index];
    });
  }

  function handleTouch(callback) {
    return (ev) => callback(ev, ev.touches[0]?.screenY);
  }

  function handleMouse(callback) {
    return (ev) => callback(ev, ev.screenY);
  }

  handleEl.addEventListener("mousedown", handleMouse(handleStart));
  handleEl.addEventListener("touchstart", handleTouch(handleStart));

  window.addEventListener("mousemove", handleMouse(handleMove));
  window.addEventListener("touchmove", handleTouch(handleMove));

  window.addEventListener("mouseup", handleMouse(handleEnd));
  window.addEventListener("touchend", handleTouch(handleEnd));
</script>
