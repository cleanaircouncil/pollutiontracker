---
import Button from "./button.astro";
---

<Fragment>
  <figure id="map" class="map" data-map></figure>

  <Button class="map-view-all-button box-shadow" data-map-view-all>
    <i class="fa fa-expand"></i><span class="map-view-all-text">&nbsp;View All</span>
  </Button>

  <template id="map-marker-stub">
    <div
      class="map-marker"
      data-facility-marker
      data-populate="alert: @data-alert, slug: @data-facility-slug"
    >
      <span class="map-marker__label" data-populate="company_name"></span>
    </div>
  </template>
</Fragment>

<style is:global>
  .map {
    width: 100%;
    height: 100%;
    pointer-events: all;
    background-color: #f2f2f2;
  }

  .map-view-all-button {
    z-index: 100;
    position: absolute;
    top: 1rem;
    right: 1rem;
  }

  .map-view-all-text {
    display: none;
  }

  .map-view-all-button:hover .map-view-all-text {
    display: block;
  }

  .map-marker {
    width: 24px;
    height: 24px;
    background: url("/assets/img/marker-dot.png") center center no-repeat;
    background-size: contain;
    cursor: pointer;
  }

  .map-marker[data-alert] {
    width: 32px;
    height: 32px;
    background-image: url("/assets/img/marker-dot-alert.png");
    z-index: 1;
  }

  .map-marker[data-current] {
    background-image: url("/assets/img/marker-current.png");
    width: 32px;
    height: 40px;
    margin-top: -8px;
    z-index: 1;
  }

  .map-marker:hover {
    z-index: 2;
  }

  .map-marker[data-alert][data-current] {
    background-image: url("/assets/img/marker-current-alert.png");
  }

  .map-marker__label {
    font-family: var(--font-default);
    line-height: 1;
    font-weight: 900;
    display: none;
    position: absolute;
    width: max-content;
    max-width: 200px;
    text-wrap: pretty;
    z-index: 5;
    text-align: center;

    left: 50%;
    top: -1rem;
    translate: -50% -100%;
    padding: 0.5rem;
    background: var(--color-white);
    box-shadow: var(--box-shadow);
    border-radius: 0.25rem;
  }

  .map-marker__label::after {
    content: "";
    display: block;
    position: absolute;
    width: 10px;
    height: 10px;
    rotate: 45deg;
    translate: -50% 50%;
    background: var(--color-white);
    left: 50%;
    bottom: 0px;
  }

  .map-marker:hover .map-marker__label {
    display: block;
  }

  .map-marker[data-current] .map-marker__label {
    display: block;
  }

  .map-marker[data-alert] .map-marker__label {
    background: var(--color-danger);
    color: var(--color-white);
  }

  .map-marker[data-alert] .map-marker__label::after {
    background: var(--color-danger);
  }

  @media screen and (min-width: 900px) {
    .map::after {
      content: "";
      display: block;
      position: absolute;
      top: 0px;
      left: 0px;
      bottom: 0px;
      width: 1rem;
      background: linear-gradient(90deg, var(--color-black), transparent);
      opacity: 0.1;
    }
  }
</style>

<script>
  import {
    currentFacilitySlug,
    data,
    getFacilityBySlug,
  } from "../helpers/store";

  import { cloneTemplate, populateWithData } from "../helpers/populate";

  const maplibregl = window["maplibregl"];

  console.log(data.map.bounds);

  async function initMap() {
    const map = new maplibregl.Map({
      container: "map", // container id
      style:
        "https://api.maptiler.com/maps/0197e64b-47f4-71b6-9770-751526b1f31b/style.json?key=v64Bpd9Og2E4Zm916XUB", // style URL
      center: [-75.165222, 39.952583],
      attributionControl: false,
    });

    map.setMaxPitch(0);
    map.setMinPitch(0);
    map.touchPitch.disable();
    map.dragRotate.disable();
    map.touchZoomRotate.disableRotation();
    map.fitBounds(data.map.bounds, { padding: 80, duration: 0 });

    return new Promise((res) => {
      map.on("load", async () => {
        res(map);
      });
    });
  }

  async function initMarkers(map, data) {
    data.facilities.forEach((facility) => {
      const markerEl = cloneTemplate("map-marker-stub");
      populateWithData(markerEl, facility);

      markerEl.addEventListener("click", () => {
        window.location.hash = `#${facility.slug}`;
      });

      // add marker to map
      new maplibregl.Marker({ element: markerEl })
        .setLngLat([facility.longitude, facility.latitude])
        .addTo(map);
    });
  }

  function focusOnFacility(map, facility) {
    if (!facility) return;

    setCurrentMarker(facility);

    map.flyTo({
      center: [facility.longitude, facility.latitude],
      zoom: 14,
      duration: 2000,
    });
  }

  function viewAll(map) {
    map.fitBounds(data.map.bounds, { padding: 80, duration: 1000 });
  }

  function setCurrentMarker(facility) {
    const markers = document.querySelectorAll("[data-facility-marker]");
    markers.forEach((marker) => {
      marker.toggleAttribute(
        "data-current",
        marker.matches(`[data-facility-slug="${facility.slug}"]`)
      );
    });
  }

  const map = await initMap();
  const viewAllButton = document.querySelector("[data-map-view-all]");

  await initMarkers(map, data);

  currentFacilitySlug.subscribe((slug) => {
    const facility = getFacilityBySlug(slug);
    focusOnFacility(map, facility);
  });

  viewAllButton.addEventListener("click", () => viewAll(map));
</script>
