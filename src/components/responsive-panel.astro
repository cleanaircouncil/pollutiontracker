---
const { class: classes, ...rest } = Astro.props;
---

<aside
  class:list={["responsive-panel height-full overflow-hidden", classes]}
  {...rest}
  data-responsive-panel
  data-position="low"
>
  <section
    class="responsive-panel__panel height-full overflow-hidden animate-panel"
    data-responsive-panel-panel
  >
    <header class="responsive-panel__handle" data-responsive-panel-handle>
    </header>

    <main class="overflow-hidden height-full" data-responsive-panel-content>
      <slot />
    </main>
  </section>
</aside>

<style>
  .responsive-panel {
  }

  .responsive-panel__panel {
    background: var(--color-white);
    pointer-events: all;
  }

  .animate-panel {
    transition: top 0.2s ease-in-out;
  }

  @media screen and (max-width: 900px) {
    .responsive-panel {
      display: flex;
      align-items: end;
    }

    .responsive-panel__panel {
      border-start-start-radius: 1rem;
      border-start-end-radius: 1rem;
      box-shadow: var(--box-shadow);

      position: absolute;
      top: var(--panel-top, 50vh);
      bottom: 0px;
      left: 0px;
      right: 0px;
    }

    .responsive-panel__handle {
      padding: 0.5rem;
      cursor: grab;
      user-select: non e;
      flex: 0 0 auto;
    }

    .responsive-panel__handle::after {
      content: "";
      display: block;
      height: 5px;
      width: 80px;
      border-radius: 5px;
      margin: 0px auto;
      background-color: var(--color-gray-light);
    }
  }

  @media screen and (min-width: 900px) {
  }
</style>

<script>
  import { atom } from "nanostores";
  const position = atom("low");

  const componentEl = document.querySelector("[data-responsive-panel]");
  const panelEl = componentEl.querySelector("[data-responsive-panel-panel]");
  const handleEl = componentEl.querySelector("[data-responsive-panel-handle]");

  // const positions = {
  //   low: "20vh",
  //   middle: "50vh",
  //   height: "100%",
  // };

  let top;
  let startY;
  let isDragging = false;

  const positions = [10, 400, 600];

  handleEl.addEventListener("mousedown", (ev: MouseEvent) => {
    ev.preventDefault();

    top = panelEl.computedStyleMap().get("top");
    startY = ev.screenY;
    isDragging = true;
    panelEl.classList.remove("animate-panel");
  });

  window.addEventListener("mousemove", (ev: MouseEvent) => {
    if (!isDragging) return;
    ev.preventDefault();

    panelEl.style.top = `max(0px, ${top} - ${startY - ev.screenY}px)`;
  });

  window.addEventListener("mouseup", (ev: MouseEvent) => {
    if (!isDragging) return;
    ev.preventDefault();

    isDragging = false;
    top = panelEl.computedStyleMap().get("top");
    const releasePosition = parseFloat(top) - (parseFloat(startY) - ev.screenY);
    // console.log(releasePosition);
    const finalPosition = positions.reduce(
      (final, position) =>
        Math.abs(releasePosition - position) < Math.abs(releasePosition - final)
          ? position
          : final,
      Infinity
    );
    panelEl.classList.add("animate-panel");
    panelEl.style.top = `${finalPosition}px`;
  });
</script>
